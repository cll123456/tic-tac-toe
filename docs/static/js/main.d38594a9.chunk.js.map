{"version":3,"sources":["types/enums.ts","compontents/ChessComp.tsx","compontents/BordComp.tsx","compontents/GameStatusComp.tsx","compontents/GameComp.tsx","App.tsx","index.tsx"],"names":["EChessType","EGameStatus","ChessComp","props","chess","type","red","className","black","onClick","none","BordComp","isGameOver","list","chessList","map","p","index","defaultProps","GameStatusComp","content","gameStatus","gaming","nextChess","redWin","blackWin","GameComp","state","this","init","setState","Array","fill","arr","getStatus","chesses","horMin","Math","floor","verMin","includes","equal","chessClick","bind","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d38594a9.chunk.js","sourcesContent":["// 定义棋子的类型枚举\r\nexport enum EChessType {\r\n  none,\r\n  red,\r\n  black\r\n}\r\n\r\n// 游戏的状态\r\nexport enum EGameStatus{\r\n  gaming, // 游戏正在进行中\r\n  redWin, // 红方赢\r\n  blackWin, // 黑方赢\r\n  equal, //平局\r\n}","import { EChessType } from \"../types/enums\";\r\nimport { IChessType } from \"../types/inters\";\r\nimport \"./../style/ChessComp.css\"\r\n\r\nexport function ChessComp(props: IChessType) {\r\n  let chess = null;\r\n  if (props.type === EChessType.red) {\r\n    chess = <div className=\"red chess-item\">帅</div>\r\n  } else if (props.type === EChessType.black) {\r\n    chess = <div className=\"black chess-item\">将</div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"chess-conatiner\" onClick={\r\n      () => {\r\n        if (props.onClick && props.type === EChessType.none) {\r\n          // 如果点击事件存在，并且棋子的位置是空白的，执行回调函数\r\n          props.onClick();\r\n        }\r\n      }}>\r\n        {chess}\r\n    </div>\r\n  )\r\n}","import { IBord } from \"../types/inters\";\r\nimport React from 'react';\r\nimport { ChessComp } from \"./ChessComp\";\r\nimport \"./../style/BordComp.css\"\r\n\r\nconst BordComp: React.FC<IBord> = function (props) {\r\n  const isGameOver = props.isGameOver as boolean;\r\n  const list = props.chessList.map((p, index) => {\r\n    return <ChessComp\r\n      key={index}\r\n      type={p}\r\n      onClick={\r\n        () => {\r\n          if (props.onClick && !isGameOver) {\r\n            props.onClick(index)\r\n          }\r\n        }\r\n      }></ChessComp>\r\n  })\r\n  return (\r\n    <div className=\"bord\">\r\n      {list}\r\n    </div>\r\n  )\r\n};\r\n\r\nBordComp.defaultProps = {\r\n  isGameOver: false\r\n}\r\n\r\nexport { BordComp }","import { EChessType, EGameStatus } from \"../types/enums\";\r\nimport { IGameStauts } from \"../types/inters\";\r\nimport './../style/GameStatusComp.css'\r\n\r\n\r\n\r\nconst GameStatusComp:React.FC<IGameStauts> = function(props){\r\n  let content: JSX.Element;\r\n    if (props.gameStatus === EGameStatus.gaming) {\r\n        if(props.nextChess === EChessType.red){\r\n            content = <div className=\"red\">红方落子</div>\r\n        }\r\n        else{\r\n            content = <div className=\"black\">黑方落子</div>\r\n        }\r\n    }\r\n    else{\r\n        if(props.gameStatus === EGameStatus.redWin){\r\n            content = <div className=\"win red\">红方胜利</div>\r\n        }\r\n        else if(props.gameStatus === EGameStatus.blackWin){\r\n            content = <div className=\"win black\">黑方胜利</div>\r\n        }\r\n        else{\r\n            content = <div className=\"win equal\">平局</div>\r\n        }\r\n    }\r\n\r\n  return (\r\n    <div className=\"status\">\r\n      {content}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { GameStatusComp }","import React from \"react\";\r\nimport { EChessType, EGameStatus } from \"../types/enums\";\r\nimport { IGameState } from \"../types/inters\";\r\nimport { BordComp } from \"./BordComp\";\r\nimport \"./../style/GameComp.css\"\r\nimport { GameStatusComp } from \"./GameStatusComp\";\r\n\r\nexport class GameComp extends React.Component<{}, IGameState>{\r\n  state: IGameState = {\r\n    chessList: [],\r\n    gameStatus: EGameStatus.gaming,\r\n    nextChess: EChessType.red\r\n  }\r\n  /**\r\n   * 节点挂载的时候调用\r\n   */\r\n  componentDidMount() {\r\n    this.init();\r\n  }\r\n  /**\r\n   * 初始化游戏\r\n   */\r\n  init() {\r\n    this.setState({\r\n      chessList: new Array(9).fill(EChessType.none) as EChessType[],\r\n      gameStatus: EGameStatus.gaming,\r\n    })\r\n  }\r\n  /**\r\n   * 点击棋盘需要落子\r\n   * @param index \r\n   */\r\n  chessClick(index: number) {\r\n    const arr = this.state.chessList;\r\n    arr[index] = this.state.nextChess;\r\n    const nextChess = this.state.nextChess === EChessType.red ? EChessType.black : EChessType.red;\r\n    \r\n    this.setState({\r\n      chessList: arr,\r\n      nextChess: nextChess,\r\n      gameStatus: this.getStatus(arr, index)\r\n    })\r\n\r\n  }\r\n  /**\r\n   * 游戏结果判断\r\n   * @param index \r\n   */\r\n  getStatus(chesses:EChessType[], index:number):EGameStatus{\r\n   //1. 判断是否有一方获得胜利\r\n   const horMin = Math.floor(index / 3) * 3;\r\n   const verMin = index % 3;\r\n   if ((chesses[horMin] === chesses[horMin + 1] && chesses[horMin] === chesses[horMin + 2])\r\n       ||\r\n       (chesses[verMin] === chesses[verMin + 3] && chesses[verMin] === chesses[verMin + 6])\r\n       ||\r\n       (chesses[0] === chesses[4] && chesses[0] === chesses[8] && chesses[0] !== EChessType.none)\r\n       ||\r\n       (chesses[2] === chesses[4] && chesses[2] === chesses[6] && chesses[2] !== EChessType.none)) {\r\n       if (chesses[index] === EChessType.red) {\r\n           return EGameStatus.redWin;\r\n       }\r\n       else {\r\n           return EGameStatus.blackWin;\r\n       }\r\n   }\r\n   //2. 判断是否平局\r\n   if (!chesses.includes(EChessType.none)) {\r\n       return EGameStatus.equal;\r\n   }\r\n   //3. 游戏正在进行\r\n   return EGameStatus.gaming;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <h1> # 字棋游戏</h1>\r\n        <GameStatusComp \r\n        nextChess={this.state.nextChess} \r\n        gameStatus={this.state.gameStatus}/>\r\n        <BordComp\r\n          chessList={this.state.chessList}\r\n          isGameOver={this.state.gameStatus !== EGameStatus.gaming}\r\n          onClick={this.chessClick.bind(this)}></BordComp>\r\n          <button onClick={\r\n            this.init.bind(this)\r\n          }>重新开始游戏</button>\r\n      </div>\r\n    )\r\n  }\r\n}","import { GameComp } from './compontents/GameComp';\n\n\nfunction App() {\n  return (\n    <div>\n      <GameComp></GameComp>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}